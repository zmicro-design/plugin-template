#!/bin/bash

template::create() {
  local typ=$1
  local name=$2

  local types=(
    "plugin"
    "package"
    "service"
    "xvm"
  )

  if [ -z "$typ" ]; then
    os::inquirer typ "select" types "Select template type" true
  fi

  if [ -z "$name" ]; then
    os::inquirer name "text" "Input $typ name" true
  fi

  log::info "[$(timestamp)] creating $typ(name: $name) ..."

  local instance_dir="$ZMICRO_PLUGINS_PATH/$typ/${typ}s"
  log::debug "[$(timestamp)] check instance dir permissions: $instance_dir ..."
  if [ ! -w "$instance_dir" ]; then
    sudo chown -R $USER $instance_dir
  fi

  local template_url="${PLUGIN_TEMPLATE_REPO_PREFIX}${typ}"
  local instance_path="$instance_dir/$name"
  local template_tmp_path=$(os::tmp_dir)
  if [ "$typ" = "plugin" ]; then
    instance_path="$ZMICRO_PLUGINS_PATH/$name"
  fi

  if [ -d "$instance_path" ]; then
    log::error "[$(timestamp)] $typ(name: $name) is already exist, please use another name."
    return 1
  fi

  log::debug "[$(timestamp)] check github token ..."
  github::get_token
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)] cannot get github token(detail: $GITHUB_TOKEN)"
    return 1
  fi

  log::debug "[$(timestamp)] check template($template_url) whether exists ..."
  if [ "$(net::is_not_found $template_url)" = "true" ]; then
    log::error "[$(timestamp)] template ($typ) is not found"
    return 1
  fi

  log::debug "[$(timestamp)] typ: $typ"
  log::debug "[$(timestamp)] name: $name"
  log::debug "[$(timestamp)] template_url: $template_url"
  log::debug "[$(timestamp)] instance_path: $instance_path"

  git::clone $template_tmp_path $template_url
  if [ "$?" != "0" ] || [ ! -d "$template_tmp_path" ]; then
    log::error "[$(timestamp)] failed to create $name with template $type."
    return 1
  fi
  cp -rf $template_tmp_path/template $instance_path
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)] failed to copy files."
    return 1
  fi

  # clean .git
  # rm -rf $instance_path/.git

  # re init
  cd $instance_path
  git init >>/dev/null 2>&1
  # add remote repository url
  git remote add origin https://github.com/zmicro-design/${typ}-${name}

  # create repository
  log::info "[$(timestamp)] start to create repository: $PLUGIN_TEMPLATE_REPO_ORGANIZATION/$typ-$name"
  github::create_repository "$PLUGIN_TEMPLATE_REPO_ORGANIZATION" "$typ-$name"
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)] failed to create repository: $PLUGIN_TEMPLATE_REPO_ORGANIZATION/$typ-$name"
    return 1
  fi
  log::info "[$(timestamp)] succeed to create repository"

  # @TODO change info

  os::copy $instance_path

  local code_command=$(color::green "zmicro ${typ} code $name")
  local go_command=$(color::green "zmicro ${typ} go $name")
  log::success "[$(timestamp)] succeed to create $typ(name: $name) (copied dir path to clipboard)"
  log::info "now you can run:"
  log::info "   $code_command"
  log::info "       => open with vscode"
  log::info ""
  log::info "   $go_command"
  log::info "       => go the dir in terminal."
}

export -f template::create
